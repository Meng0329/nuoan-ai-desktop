name: 调试 macOS 构建

on:
  workflow_dispatch:

jobs:
  debug:
    name: macOS 构建调试
    runs-on: macos-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: 系统诊断
      run: |
        echo "=========================================="
        echo "系统信息诊断"
        echo "=========================================="
        echo ""
        echo "操作系统: $(uname -s)"
        echo "架构: $(uname -m)"
        echo "macOS 版本: $(sw_vers -productVersion)"
        echo "Node.js: $(node --version)"
        echo "npm: $(npm --version)"
        echo ""
        echo "检查 macOS 工具:"
        which iconutil && iconutil --version || echo "❌ iconutil 不可用"
        which sips && sips --version || echo "❌ sips 不可用"
        echo ""
        echo "磁盘空间:"
        df -h
        echo ""
        echo "内存信息:"
        vm_stat | head -10
    
    - name: 检查项目结构
      working-directory: desktop
      run: |
        echo "=========================================="
        echo "项目结构检查"
        echo "=========================================="
        echo ""
        echo "当前目录: $(pwd)"
        echo ""
        echo "文件列表:"
        ls -lha
        echo ""
        echo "assets 目录:"
        ls -lh assets/ || echo "❌ assets 目录不存在"
        echo ""
        echo "build 目录:"
        ls -lh build/ || echo "ℹ️ build 目录不存在（正常）"
    
    - name: 安装依赖
      working-directory: desktop
      run: |
        echo "安装依赖..."
        npm install --verbose
        echo ""
        echo "检查关键依赖:"
        npm list sharp || echo "⚠️ sharp 未安装"
        npm list png2icons || echo "⚠️ png2icons 未安装"
        npm list electron-builder || echo "⚠️ electron-builder 未安装"
    
    - name: 测试图标生成（详细模式）
      working-directory: desktop
      run: |
        echo "=========================================="
        echo "测试图标生成"
        echo "=========================================="
        echo ""
        echo "检查 generateMacIcon.js:"
        cat generateMacIcon.js
        echo ""
        echo "=========================================="
        echo "运行图标生成脚本（详细模式）"
        echo "=========================================="
        set -x
        node generateMacIcon.js
        set +x
        echo ""
        echo "检查结果:"
        if [ -f "build/icon.icns" ]; then
          echo "✅ icon.icns 生成成功"
          ls -lh build/icon.icns
          file build/icon.icns
        else
          echo "❌ icon.icns 生成失败"
          echo "build 目录内容:"
          ls -lhR build/ || echo "build 目录不存在"
        fi
    
    - name: 测试最小化构建
      working-directory: desktop
      run: |
        echo "=========================================="
        echo "测试最小化构建（仅打包，不签名）"
        echo "=========================================="
        echo ""
        echo "electron-builder 版本:"
        npx electron-builder --version
        echo ""
        echo "开始构建 x64 版本..."
        npx electron-builder --mac --x64 --dir 2>&1 | tee debug-build.log
        BUILD_CODE=${PIPESTATUS[0]}
        echo ""
        echo "构建退出码: $BUILD_CODE"
        echo ""
        if [ $BUILD_CODE -ne 0 ]; then
          echo "❌ 构建失败"
          echo ""
          echo "完整日志:"
          cat debug-build.log
          exit 1
        else
          echo "✅ 构建成功"
          echo ""
          echo "生成的文件:"
          ls -lhR dist/
        fi
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        DEBUG: electron-builder
    
    - name: 上传调试日志
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: |
          desktop/debug-build.log
          desktop/icon-build.log
          desktop/dist/**/*
        if-no-files-found: ignore

